[gd_scene load_steps=4 format=3 uid="uid://dl5gfetm3t5er"]

[ext_resource type="ArrayMesh" path="res://experimental/generate_mesh/rigged_helpers.res" id="1_wvt8k"]
[ext_resource type="ArrayMesh" uid="uid://bahrnracj2e3a" path="res://experimental/generate_mesh/human.res" id="2_tal6y"]

[sub_resource type="GDScript" id="GDScript_s7bhv"]
script/source = "extends Node3D

var vertex_groups = Utils.read_json(\"res://experimental/mpfb2_plugin/mpfb/data/mesh_metadata/basemesh_vertex_groups.json\")
var mixamo_weights = Utils.read_json(\"res://experimental/mpfb2_plugin/mpfb/data/rigs/standard/weights.mixamo.json\")
var rigged_b2g_index = []
var new_index = []
var old_index = {}
var sf_arrays = []
var ST = SurfaceTool.new()

func _ready():
	#var obj_data = OBJ_to_Mesh.new(\"res://mpfb2_plugin/mpfb/data/3dobjs/base.obj\").run()
	var helper_mesh = $RiggedHelpers.mesh
	rigged_b2g_index = Utils.get_mh2gd_index_from_mesh(helper_mesh)
	#print(rigged_b2g_index)
	sf_arrays = helper_mesh.surface_get_arrays(0)
	
	var g_delete_verts = []
	g_delete_verts.append_array(get_vertex_group_ids(\"HelperGeometry\"))
	g_delete_verts.append_array(get_vertex_group_ids(\"JointCubes\"))
	g_delete_verts.sort()
	g_delete_verts.reverse()
	#print(g_delete_verts)
	
	for i in sf_arrays[Mesh.ARRAY_VERTEX].size():
		new_index.append(i)
	for g_id in g_delete_verts:
		new_index.remove_at(g_id)
	
	for new_id in new_index.size():
		var old_id = new_index[new_id]	
		old_index[old_id] = new_id
	
	var new_sf_arrays = []
	new_sf_arrays.resize(Mesh.ARRAY_MAX)
	new_sf_arrays[Mesh.ARRAY_VERTEX] = PackedVector3Array()
	new_sf_arrays[Mesh.ARRAY_INDEX] = PackedInt32Array()
	new_sf_arrays[Mesh.ARRAY_TEX_UV] = PackedVector2Array()
	new_sf_arrays[Mesh.ARRAY_BONES] = PackedInt32Array()
	new_sf_arrays[Mesh.ARRAY_WEIGHTS] = PackedFloat32Array()
	new_sf_arrays[Mesh.ARRAY_CUSTOM0] = PackedFloat32Array()
	
	for new_id in new_index.size():
		var old_id = new_index[new_id]
		new_sf_arrays[Mesh.ARRAY_VERTEX].append(sf_arrays[Mesh.ARRAY_VERTEX][old_id])
		new_sf_arrays[Mesh.ARRAY_TEX_UV].append(sf_arrays[Mesh.ARRAY_TEX_UV][old_id])
		var bone_slice = sf_arrays[Mesh.ARRAY_BONES].slice(old_id*8,(old_id+1)*8)
		new_sf_arrays[Mesh.ARRAY_BONES].append_array(bone_slice)
		var weight_slice = sf_arrays[Mesh.ARRAY_WEIGHTS].slice(old_id*8,(old_id+1)*8)
		new_sf_arrays[Mesh.ARRAY_WEIGHTS].append_array(weight_slice)
		new_sf_arrays[Mesh.ARRAY_CUSTOM0].append(sf_arrays[Mesh.ARRAY_CUSTOM0][old_id])
		
	for i in sf_arrays[Mesh.ARRAY_INDEX].size()/3:
		var index_slice = sf_arrays[Mesh.ARRAY_INDEX].slice(i*3,(i+1)*3)
		if is_valid_index_slice(index_slice):
			new_sf_arrays[Mesh.ARRAY_INDEX].append_array(get_new_index_slice(index_slice))
			
	var new_mesh = ArrayMesh.new()
	var flags = helper_mesh.surface_get_format(0)
	new_mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES,new_sf_arrays,[],{},flags)
	var shaded_mesh = Utils.generate_normals_tangents(new_mesh)
	ResourceSaver.save(shaded_mesh,\"res://experimental/generate_mesh/human.res\")

func get_new_index_slice(index_slice):
	var new_slice = []
	for old_id in index_slice:
		var new_id = old_index[old_id]
		new_slice.append(new_id)
	return new_slice

func is_valid_index_slice(index_slice):
	for old_id in index_slice:
		if not old_id in old_index:
			return false
	return true	

func get_vertex_group_ids(group_name):
	var g_vertex_ids = []
	for v_group in vertex_groups[group_name]:
		for b_id in range(v_group[0],v_group[1]+1):
			for g_id in rigged_b2g_index[b_id]:
				g_vertex_ids.append(g_id)
	return g_vertex_ids
	

	
	
"

[node name="generate_basmesh_remove_helpers" type="Node3D"]
script = SubResource("GDScript_s7bhv")

[node name="RiggedHelpers" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.604648, 0, 0)
mesh = ExtResource("1_wvt8k")

[node name="Output" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.999618, 0, 0)
mesh = ExtResource("2_tal6y")
