[gd_scene load_steps=3 format=3 uid="uid://bodnfv84005li"]

[ext_resource type="AnimationLibrary" uid="uid://dexe20kj3sctb" path="res://addons/humanizer/data/mh_raw/mixamo_rig_tpose.glb" id="1_wrnhs"]

[sub_resource type="GDScript" id="GDScript_wpej5"]
script/source = "@tool
extends Node

## A file containingn only a tpose clip
@export var tpose_file: AnimationLibrary
## Click the checkbox to run
@export var process: bool:
	set(value):
		run()
		
## The path where the animation libraries reside
@export_dir var import_path

			
func run() -> void:
	var tpose := {}
	var tpose_anim: Animation = tpose_file.get_animation(tpose_file.get_animation_list()[0])
	for bone in tpose_anim.get_track_count():
		var bname = tpose_anim.track_get_path(bone)
		tpose[str(bname).split(':', true)[1]] = tpose_anim.track_get_key_value(bone, 0).normalized()
	
	var files = OSPath.get_files(import_path)
	for fl in files:
		if not fl.get_extension() == 'glb':
			continue
		var imported = ResourceLoader.load(fl)
		if not imported is AnimationLibrary:
			continue
		var library = AnimationLibrary.new()
		for anim_name in imported.get_animation_list():
			var anim: Animation = imported.get_animation(anim_name).duplicate(true)
			for track in anim.get_track_count():
				# Fix node paths in animation tracks
				var track_name = str(anim.track_get_path(track))
				if 'LeftLowerArm' in track_name:
					print(anim.track_get_key_value(track, 0))
					print(tpose['LeftLowerArm'])
					print(anim.track_get_key_value(track, 0) * tpose['LeftShoulder'])
				# Remove \"Armature\" node so we can point directly at Skeleton3D
				track_name = track_name.replace('Armature/', '')
				# Replace mixamorig12 with mixamorig (for any number up to 50)
				for i in 50:
					track_name = track_name.replace('rig' + str(i), 'rig')
				anim.track_set_path(track, NodePath(track_name))
				
				'''
				# Fix position tracks
				if Animation.TrackType.TYPE_POSITION_3D == anim.track_get_type(track):
					for kf in anim.track_get_key_count(track):
						var pos = anim.track_get_key_value(track, kf)
						# Fix scale in position tracks
						pos /= 100
						# Fix global offset (will be affected by global rotation fix)
						if 'hips' in track_name.to_lower():
							pos = Quaternion(Vector3.RIGHT, PI / 2) * pos
						anim.track_set_key_value(track, kf, pos)
						'''
						
				# Fix rotation tracks
				if Animation.TrackType.TYPE_ROTATION_3D == anim.track_get_type(track):
					for kf in anim.track_get_key_count(track):
						var rot: Quaternion = anim.track_get_key_value(track, kf)
						for bone in tpose:
							if bone in track_name:
								rot = (rot.normalized().inverse() * tpose[bone].normalized() * rot.normalized()).normalized()
						anim.track_set_key_value(track, kf, rot)

			library.add_animation(anim_name, anim.duplicate(true))
		var file_name = imported.resource_path.get_file().replace('.glb', '') + '_converted.res'
		ResourceSaver.save(library, import_path.path_join(file_name))
"

[node name="Node" type="Node"]
script = SubResource("GDScript_wpej5")
tpose_file = ExtResource("1_wrnhs")
import_path = "res://addons/humanizer/data/animations"
